Proceeding to build out server folder and running our application

1) config folder > copy over mongoose.config file > also .env (for db credentials)
        Update database for a new project within our .env file.
            File will also set up responses for successful or error connecting to db / models / validations.

    ** Before proceeding, check backend by testing your server.js with our .config.js file. 
- if nodemon is not already installed: 
    npm i -g nodemon (for global installation)
- else, run in the console:
    nodemon server.js

 ** At this moment, your db information should be secured and within a .gitignore
 ** A successful connection between server and your database has been established.

-- Using a user schema or model, but this can be anything
-- From a user to a post, or a user's post.

* Refer to models > user.model.js - for a default example of setting up your db
    * Once you create your first document, Mongoose will create your DB.
    
    
2) Setup the model files for all of your schemas / data types.
    model folder > ex: {singular-text-name}.model.js
        Allowing our controller to perform CRUD operations. 
    Controller calls the models to the routes folder to send back data per page request.

3) Import the model for the collection (aka: table in our db).
    To perform CRUD operations with our soon to be made routes.
        Exporting from models, allows us to import and use the User model in any file.
        Because of our modularization within our application.
            Which then heads to our routing.

4) After schema / models are created AND after importing those within our controllers.
    We can navigate through your routes and retrieve the necessary queries per route.

5) Finally, you can go to server.js that we created at the start and begin testing your routes.
    Begin by heading back to your terminal and running
        nodemon server.js

    == DEBUGGING ==
- Make sure the MongoDB server is running ('mongod' command).
- Make sure your post data matches the data that you are inserting into the database.
    In our example that is the (name and age).
- Make sure that the form submits a post request to '/users'.
- Assure that mongoose was installed (early steps).
- Check the order of everything related to mongoose.
    (require => connect => Schema => Model => route)
- Use console.log statements to follow the flow of your data.


STEP TWO, ESTABLISH THE SCHEMA OR DATABASE
WE CAN TEST IN POSTMAN PRIOR TO DOING THE FRONT-END
Keep it simple at first

FROM THERE, we can move forward and work on validations.
    - We can add these into our existing models, we could have done them at once.
        but, understanding the steps are important
        maybe validations may not be required depending on the project.

Example:
    const UserSchema = new mongoose.Schema({
    name: String,
    age: Number
    }, { timestamps: true });

    We can have this be more detailed == 

    const UserSchema = new mongoose.Schema({
    first_name: String,
    last_name: String,
    age: Number
    }, 
    email: {
    }, 
    { timestamps: true }
);

    Now, we can add our validations to understand it better.

    const UserSchema = new mongoose.Schema({
    first_name: {
        type: String,
        required: [true, "First Name is required"],
        minlength: [6, "First name must be at least 6 characters long"]
    },
    last_name: {
        type: String,
        required: [true, "Last name is required"],
        minlength: [6, "First name must be at least 6 characters long"],
        maxlength: [20, "Last name must be at most 20 characters long"]
    },
    age: {
        type: Number,
        min: [1, "You must be at least 1 or older to register"],
        max: [150, "You must be at most 118 years old to register"]
    },
    email: {
        type: String, required: [true, "Email is required"] 
    }
}, { timestamps: true });

    Notice that we are able to establish minimum and maximum values at the same time if we want to.
    How it changed from a simple User model

    const UserSchema = new mongoose.Schema({
        name: String,
        age: Number
    }, { timestamps: true });

        ====== AFTER VALIDATIONS ======
        ====== Nested Documents =======

We have Nested Documents - MongoDB is NoSQL, so we do not deal with joins. We do nested documents.
Dealing with JSON objects allows us to store any data type, (arrays and nested objects)!
    All within a single object.. NOTE: that a nested document schema is COMPLETED SEPARATE of
    regular mongoose documents.

Example: A User schema that can have MANY friends may look like the following.
    const UserSchema = new mongoose.Schema({
        fName: String,
        lName: String,
        friends: [UserSchema]
    });

    - There should be caution because it is possible to store duplicates in the DB.

Example 2: Banking Application may have a User Schema like the following. 

./user.model.js

    const UserSchema = new mongoose.Schema({
        fName: String,
        lName: String,
        email: String,
        password: String,
        bankAccounts: [BankAccountSchema]
    },
    { timestamps: true }
);

    - Because a User may have many bank accounts, the relationship is determined by nesting
        their BankAccountSchema into an array. Meaning the fields bankAccounts will be an array
        of nothing but BankAccount objects. 

    - Continuing with the BankAccountSchema, each Bank Account can have MANY transactions and so
        we can nest a TransactionSchema into our BankAccountSchema:
    
    Example 3: User, has MANY Bank Accounts that have MANY Transactions.

./bank.model.js

    const TransactionSchema = new mongoose.Schema(
        {
            amount: { type: Number, required: true},
            vendor: { type: String, required: true}
        },
        { timestamps: { createdAt: true } }
    );

    const BankAccountSchema = new mongoose.Schema(
        {
            accountType: { type: String, required: true },
            balanace: { type: Number, default: 0 },
            transactions: [TransactionSchema]
        },
        { timestamps: true }
    );

======= FULL STACK DEVELOPMENT =======
    At this point, we should have our project modularized, installed what is necessary 
    for Full Stack Development. Also our backend should be ready, possibly DB schemas established as well.
        It is possible to even have POSTMAN to test our functionality in our new DB.
        All BEFORE we even begin to do Front End Development and adding forms + components.
    
    We should be have 2 consoles running, remember you can rename them. So I would suggest to
    have 1 console running (renamed + recolor in VSCode). Using:
        nodemon server.js
    Opening your second console (rename + recolor), and while in the client folder, running our Front End:
        npm run start
    
    From there we will utilized Axios (should be already installed).
        To have the REACT project communicate with our server. 
        NOTE: REACT does not care aboue the language running in the server!!
            That means, our server could be JAVA based (keep up the studying).
        React will make requests and get responses.